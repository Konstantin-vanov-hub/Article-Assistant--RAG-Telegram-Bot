from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
import logging
from Requests import answer
from indexer import reindex
import os
from dotenv import load_dotenv
import sqlite3
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –¥–ª—è –ª–∏–º–∏—Ç–æ–≤
def init_db():
    conn = sqlite3.connect('user_limits.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            requests_count INTEGER DEFAULT 0,
            last_reset_date TEXT,
            notified BOOLEAN DEFAULT FALSE
        )
    ''')
    conn.commit()
    return conn

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
def check_request_limit(user_id, conn):
    cursor = conn.cursor()
    today = datetime.now().strftime('%Y-%m-%d')
    
    cursor.execute('SELECT requests_count, last_reset_date, notified FROM users WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    
    if not result:
        cursor.execute('INSERT INTO users (user_id, requests_count, last_reset_date) VALUES (?, 1, ?)', 
                      (user_id, today))
        conn.commit()
        return True, 9  # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å, –æ—Å—Ç–∞–ª–æ—Å—å 9
    
    count, last_date, notified = result
    
    # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –µ—Å–ª–∏ –Ω–æ–≤—ã–π –¥–µ–Ω—å
    if last_date != today:
        cursor.execute('UPDATE users SET requests_count = 1, last_reset_date = ?, notified = FALSE WHERE user_id = ?',
                      (today, user_id))
        conn.commit()
        return True, 9
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
    if count >= 10:
        if not notified:
            cursor.execute('UPDATE users SET notified = TRUE WHERE user_id = ?', (user_id,))
            conn.commit()
        return False, 0
    
    cursor.execute('UPDATE users SET requests_count = requests_count + 1 WHERE user_id = ?', (user_id,))
    conn.commit()
    return True, 10 - count - 1

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–æ–≤
LANGUAGES = {
    'en': {
        'welcome': "üåü *Welcome to Article Assistant!* üåü\n\nPlease add an article first to enable question answering",
        'ask_btn': "Ask question",
        'article_btn': "Enter article",
        'lang_btn': "Change language",
        'prompt_btn': "Prompt settings",
        'lang_changed': "Language changed to English",
        'ask_prompt': "üìù Please enter your question about the article:",
        'processing': "üîç Searching for answer in the article...",
        'indexing': "üìö Indexing article content...",
        'after_answer': "üí° You can ask another question or choose another option below",
        'cancel': "Cancel",
        'error': "‚ùå Error occurred",
        'enter_url': "üåê Please enter the article URL:",
        'no_article_error': "‚ö†Ô∏è Please add an article first using the 'Enter article' button",
        'invalid_input': "‚ö†Ô∏è Please use the buttons below to interact with me",
        'index_success': "‚úÖ Article indexed successfully!",
        'chunks_info': "Processed {} content chunks.\n\nYou can now ask questions about this article.",
        'prompt_menu': "‚úèÔ∏è Choose prompt option:",
        'default_prompt': "Use default prompt",
        'custom_prompt': "Write new prompt",
        'enter_custom_prompt': "üìù Enter your custom prompt (e.g., 'Answer in technical style'):",
        'prompt_saved': "‚úÖ Custom prompt saved! Now ask your question.",
        'current_prompt': "Current prompt: {}",
        'limit_warning': "‚ö†Ô∏è You have {remaining} free requests left",
        'limit_reached': """üö´ Free request limit reached (10/day)

To continue:
1. Get your OpenAI API key: platform.openai.com
2. Deploy your own instance:
   https://github.com/Konstantin-vanov-hub/RAG_bot
3. Enjoy unlimited access!""",
        'setup_guide': "üîß Setup guide: https://github.com/Konstantin-vanov-hub/RAG_bot#setup"
    },
    'ru': {
        'welcome': "üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –°—Ç–∞—Ç–µ–π!* üåü\n\n–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Å—Ç–∞—Ç—å—é, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã",
        'ask_btn': "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å",
        'article_btn': "–í–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç—å—é",
        'lang_btn': "–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫",
        'prompt_btn': "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–º–ø—Ç–∞",
        'lang_changed': "–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –†—É—Å—Å–∫–∏–π",
        'ask_prompt': "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ —Å—Ç–∞—Ç—å–µ:",
        'processing': "üîç –ò—â—É –æ—Ç–≤–µ—Ç –≤ —Å—Ç–∞—Ç—å–µ...",
        'indexing': "üìö –ò–Ω–¥–µ–∫—Å–∏—Ä—É—é —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏...",
        'after_answer': "üí° –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –æ–ø—Ü–∏—é –Ω–∏–∂–µ",
        'cancel': "–û—Ç–º–µ–Ω–∞",
        'error': "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
        'enter_url': "üåê –í–≤–µ–¥–∏—Ç–µ URL —Å—Ç–∞—Ç—å–∏:",
        'no_article_error': "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Å—Ç–∞—Ç—å—é, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É '–í–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç—å—é'",
        'invalid_input': "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è",
        'index_success': "‚úÖ –°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∞!",
        'chunks_info': "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —ç—Ç–æ–π —Å—Ç–∞—Ç—å–µ.",
        'prompt_menu': "‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–æ–º–ø—Ç–∞:",
        'default_prompt': "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç",
        'custom_prompt': "–ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–º–ø—Ç",
        'enter_custom_prompt': "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ–º–ø—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–û—Ç–≤–µ—á–∞–π –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º —Å—Ç–∏–ª–µ'):",
        'prompt_saved': "‚úÖ –ü—Ä–æ–º–ø—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –¢–µ–ø–µ—Ä—å –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å.",
        'current_prompt': "–¢–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç: {}",
        'limit_warning': "‚ö†Ô∏è –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {remaining} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
        'limit_reached': """üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (10/–¥–µ–Ω—å)

–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:
1. –ü–æ–ª—É—á–∏—Ç–µ API-–∫–ª—é—á OpenAI: platform.openai.com
2. –†–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ —Å–≤–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä:
   https://github.com/Konstantin-vanov-hub/RAG_bot
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!""",
        'setup_guide': "üîß –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: https://github.com/Konstantin-vanov-hub/RAG_bot#setup"
    }
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–µ—Å–µ–¥—ã
(
    MAIN_MENU, ENTER_LINK, CHANGE_LANG, 
    ASK_QUESTION, PROMPT_MENU, ENTER_CUSTOM_PROMPT
) = range(6)

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç
DEFAULT_PROMPT = {
    'en': """Expert Research Assistant Guidelines:

1. Source Accuracy:
   - Strictly use ONLY the provided context
   - For missing info: "The article doesn't specify"
   - Never hallucinate facts

2. Response Structure:
   - Core Answer (1 bolded sentence)
   - Key Evidence (3-5 bullet points max)
   - Practical Implications (when relevant)
   - Limitations (if data is incomplete)

3. Technical Content:
   - Code: ```python\n...\n``` 
   - Formulas: $E=mc^2$ format
   - Terms: "API (Application Programming Interface)"

4. Language Rules:
   - Match question's language
   - Auto-correct grammar subtly
   - Use ISO standards for dates/units

Context:
{context}

Question: {question}""",

    'ru': """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–∞-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞:

1. –¢–æ—á–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö:
   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¢–û–õ–¨–ö–û –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
   - –ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö: "–í —Å—Ç–∞—Ç—å–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
   - –ó–∞–ø—Ä–µ—â–µ–Ω–æ "–¥–æ–¥—É–º—ã–≤–∞—Ç—å" —Ñ–∞–∫—Ç—ã

2. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:
   - –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∂–∏—Ä–Ω—ã–º)
   - –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ (3-5 –ø—É–Ω–∫—Ç–æ–≤ —Å–ø–∏—Å–∫–∞)
   - –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ (–µ—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ)
   - –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (–ø—Ä–∏ –Ω–µ–ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)

3. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ:
   - –ö–æ–¥: ```python\n...\n```
   - –§–æ—Ä–º—É–ª—ã: $E=mc^2$ 
   - –¢–µ—Ä–º–∏–Ω—ã: "API (–ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)"

4. –Ø–∑—ã–∫–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞:
   - –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —è–∑—ã–∫—É –≤–æ–ø—Ä–æ—Å–∞
   - –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –æ—à–∏–±–æ–∫ –≤ –æ—Ç–≤–µ—Ç–µ
   - –î–∞—Ç—ã/–µ–¥–∏–Ω–∏—Ü—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO

–ö–æ–Ω—Ç–µ–∫—Å—Ç:
{context}

–í–æ–ø—Ä–æ—Å: {question}"""
}

def get_main_menu_keyboard(lang: str, has_article: bool = False):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    buttons = []
    if has_article:
        buttons.append([KeyboardButton(LANGUAGES[lang]['ask_btn'])])
    buttons.extend([
        [KeyboardButton(LANGUAGES[lang]['article_btn'])],
        [KeyboardButton(LANGUAGES[lang]['lang_btn']), KeyboardButton(LANGUAGES[lang]['prompt_btn'])]
    ])
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

def get_prompt_menu_keyboard(lang: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é –ø—Ä–æ–º–ø—Ç–æ–≤"""
    return ReplyKeyboardMarkup([
        [KeyboardButton(LANGUAGES[lang]['default_prompt'])],
        [KeyboardButton(LANGUAGES[lang]['custom_prompt'])],
        [KeyboardButton(LANGUAGES[lang]['cancel'])]
    ], resize_keyboard=True)

def get_lang_menu_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    return ReplyKeyboardMarkup([
        [KeyboardButton("English üá¨üáß"), KeyboardButton("–†—É—Å—Å–∫–∏–π üá∑üá∫")]
    ], resize_keyboard=True)

def get_cancel_keyboard(lang: str):
    """–ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã"""
    return ReplyKeyboardMarkup([[KeyboardButton(LANGUAGES[lang]['cancel'])]], resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    context.user_data['lang'] = 'en'  # –Ø–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    context.user_data['has_article'] = False  # –§–ª–∞–≥ –Ω–∞–ª–∏—á–∏—è —Å—Ç–∞—Ç—å–∏
    context.user_data['current_prompt'] = DEFAULT_PROMPT['en']  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    lang = context.user_data['lang']
    
    await update.message.reply_text(
        LANGUAGES[lang]['welcome'],
        parse_mode='Markdown',
        reply_markup=get_main_menu_keyboard(lang, has_article=False)
    )
    return MAIN_MENU

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    lang = context.user_data.get('lang', 'en')
    has_article = context.user_data.get('has_article', False)
    text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –æ–¥–Ω–æ–π –∏–∑ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    valid_commands = [
        LANGUAGES[lang]['ask_btn'],
        LANGUAGES[lang]['article_btn'],
        LANGUAGES[lang]['lang_btn'],
        LANGUAGES[lang]['prompt_btn'],
        LANGUAGES[lang]['cancel']
    ]
    
    if text not in valid_commands:
        await update.message.reply_text(
            LANGUAGES[lang]['invalid_input'],
            reply_markup=get_main_menu_keyboard(lang, has_article)
        )
        return MAIN_MENU
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "Ask question"
    if text == LANGUAGES[lang]['ask_btn']:
        if not has_article:
            await update.message.reply_text(
                LANGUAGES[lang]['no_article_error'],
                reply_markup=get_main_menu_keyboard(lang, has_article)
            )
            return MAIN_MENU
        
        await update.message.reply_text(
            LANGUAGES[lang]['ask_prompt'],
            reply_markup=get_cancel_keyboard(lang)
        )
        return ASK_QUESTION
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "Enter article"
    if text == LANGUAGES[lang]['article_btn']:
        await update.message.reply_text(
            LANGUAGES[lang]['enter_url'],
            reply_markup=get_cancel_keyboard(lang)
        )
        return ENTER_LINK
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "Change language"
    if text == LANGUAGES[lang]['lang_btn']:
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:" if lang == 'ru' else "Select language:",
            reply_markup=get_lang_menu_keyboard()
        )
        return CHANGE_LANG
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "Prompt settings"
    if text == LANGUAGES[lang]['prompt_btn']:
        await update.message.reply_text(
            LANGUAGES[lang]['prompt_menu'],
            reply_markup=get_prompt_menu_keyboard(lang)
        )
        return PROMPT_MENU
    
    return MAIN_MENU

async def handle_prompt_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –ø—Ä–æ–º–ø—Ç–æ–≤"""
    lang = context.user_data.get('lang', 'en')
    text = update.message.text
    
    if text == LANGUAGES[lang]['cancel']:
        await update.message.reply_text(
            "–û—Ç–º–µ–Ω–µ–Ω–æ" if lang == 'ru' else "Canceled",
            reply_markup=get_main_menu_keyboard(lang, context.user_data.get('has_article', False))
        )
        return MAIN_MENU
    
    if text == LANGUAGES[lang]['default_prompt']:
        context.user_data['current_prompt'] = DEFAULT_PROMPT[lang]
        await update.message.reply_text(
            LANGUAGES[lang]['current_prompt'].format(DEFAULT_PROMPT[lang]),
            reply_markup=get_main_menu_keyboard(lang, context.user_data.get('has_article', False))
        )
        return MAIN_MENU
    
    if text == LANGUAGES[lang]['custom_prompt']:
        await update.message.reply_text(
            LANGUAGES[lang]['enter_custom_prompt'],
            reply_markup=get_cancel_keyboard(lang)
        )
        return ENTER_CUSTOM_PROMPT
    
    return PROMPT_MENU

async def handle_custom_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
    lang = context.user_data.get('lang', 'en')
    text = update.message.text
    
    if text == LANGUAGES[lang]['cancel']:
        await update.message.reply_text(
            "–û—Ç–º–µ–Ω–µ–Ω–æ" if lang == 'ru' else "Canceled",
            reply_markup=get_main_menu_keyboard(lang, context.user_data.get('has_article', False))
        )
        return MAIN_MENU
    
    context.user_data['current_prompt'] = text
    await update.message.reply_text(
        LANGUAGES[lang]['prompt_saved'],
        reply_markup=get_main_menu_keyboard(lang, context.user_data.get('has_article', False))
    )
    return MAIN_MENU

async def handle_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å —É—á–µ—Ç–æ–º –ª–∏–º–∏—Ç–æ–≤"""
    lang = context.user_data.get('lang', 'en')
    has_article = context.user_data.get('has_article', False)
    text = update.message.text
    user_id = update.effective_user.id
    
    if not has_article:
        await update.message.reply_text(
            LANGUAGES[lang]['no_article_error'],
            reply_markup=get_main_menu_keyboard(lang, has_article)
        )
        return MAIN_MENU
    
    if text == LANGUAGES[lang]['cancel']:
        await update.message.reply_text(
            "–û—Ç–º–µ–Ω–µ–Ω–æ" if lang == 'ru' else "Canceled",
            reply_markup=get_main_menu_keyboard(lang, has_article)
        )
        return MAIN_MENU
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
    conn = init_db()
    allowed, remaining = check_request_limit(user_id, conn)
    conn.close()
    
    if not allowed:
        await update.message.reply_text(
            LANGUAGES[lang]['limit_reached'],
            reply_markup=get_main_menu_keyboard(lang, has_article)
        )
        return MAIN_MENU
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –º–∞–ª–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤
    if 0 < remaining <= 3:
        await update.message.reply_text(
            LANGUAGES[lang]['limit_warning'].format(remaining=remaining),
            reply_markup=get_main_menu_keyboard(lang, has_article)
        )
    
    await update.message.reply_text(LANGUAGES[lang]['processing'])
    
    try:
        current_prompt = context.user_data.get('current_prompt', DEFAULT_PROMPT[lang])
        full_query = f"{current_prompt}\n\nQuestion: {text}"
        
        response = answer(full_query)
        await update.message.reply_text(
            response,
            reply_markup=get_main_menu_keyboard(lang, has_article)
        )
        await update.message.reply_text(
            LANGUAGES[lang]['after_answer'],
            reply_markup=get_main_menu_keyboard(lang, has_article)
        )
        
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}" if lang == 'ru' else f"‚ùå Error: {str(e)}"
        await update.message.reply_text(
            error_msg,
            reply_markup=get_main_menu_keyboard(lang, has_article)
        )
    
    return MAIN_MENU

async def handle_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–µ–π"""
    lang = context.user_data.get('lang', 'en')
    text = update.message.text
    
    if text == LANGUAGES[lang]['cancel']:
        await update.message.reply_text(
            "–û—Ç–º–µ–Ω–µ–Ω–æ" if lang == 'ru' else "Canceled",
            reply_markup=get_main_menu_keyboard(lang, context.user_data.get('has_article', False))
        )
        return MAIN_MENU
    
    if not text.startswith(('http://', 'https://')):
        await update.message.reply_text(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http:// –∏–ª–∏ https://)" if lang == 'ru' 
            else "‚ö†Ô∏è Please enter a valid URL (starting with http:// or https://)",
            reply_markup=get_cancel_keyboard(lang)
        )
        return ENTER_LINK
    
    try:
        with open("Link.txt", "w", encoding="utf-8") as f:
            f.write(text)
        
        await update.message.reply_text(LANGUAGES[lang]['indexing'])
        num_chunks = reindex(text)
        
        context.user_data['has_article'] = True
        
        await update.message.reply_text(LANGUAGES[lang]['index_success'])
        
        chunks_message = LANGUAGES[lang]['chunks_info'].format(num_chunks)
        await update.message.reply_text(
            chunks_message,
            reply_markup=get_main_menu_keyboard(lang, has_article=True)
        )
    except Exception as e:
        error_msg = (
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {str(e)}" 
            if lang == 'ru' else 
            f"‚ùå Indexing error: {str(e)}"
        )
        await update.message.reply_text(
            error_msg,
            reply_markup=get_main_menu_keyboard(lang, False)
        )
    
    return MAIN_MENU

async def handle_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–º–µ–Ω–∞ —è–∑—ã–∫–∞"""
    lang_map = {"English üá¨üáß": 'en', "–†—É—Å—Å–∫–∏–π üá∑üá∫": 'ru'}
    text = update.message.text
    
    if text in lang_map:
        lang = lang_map[text]
        context.user_data['lang'] = lang
        context.user_data['current_prompt'] = DEFAULT_PROMPT[lang]
        
        await update.message.reply_text(
            LANGUAGES[lang]['lang_changed'],
            reply_markup=get_main_menu_keyboard(lang, context.user_data.get('has_article', False))
        )
    else:
        current_lang = context.user_data.get('lang', 'en')
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö" if current_lang == 'ru' else
            "Please select language from the options",
            reply_markup=get_lang_menu_keyboard()
        )
    
    return MAIN_MENU

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    
    TOKEN = os.getenv("TELEGRAM_TOKEN")
    if not TOKEN:
        logger.error("–¢–æ–∫–µ–Ω Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        raise RuntimeError("Telegram token is missing")
    
    application = ApplicationBuilder().token(TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MAIN_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, main_menu)],
            ASK_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_question)],
            ENTER_LINK: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_link)],
            CHANGE_LANG: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_language)],
            PROMPT_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_prompt_menu)],
            ENTER_CUSTOM_PROMPT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_custom_prompt)]
        },
        fallbacks=[CommandHandler('start', start)]
    )
    
    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == '__main__':
    main()